import numpy
import random
import matplotlib.pyplot as plt

if __name__ == '__main__':
    number_of_nodes = 1000
    grade_of_tree = 4
    nodeIds = range(1, number_of_nodes+1)
    parentIds = [0 for x in range(number_of_nodes)]
    for i in range(number_of_nodes - 1):
        parentIds[i + 1] = (i // grade_of_tree) + 1
    event_rate_div = 1
    rates = [(x+1) * 0.2 for x in range(event_rate_div)]
    number_of_rounds = 1000
    number_of_percentage_div = 10
    flooding_avg_per_rate = [[0 for x in range(number_of_percentage_div)] for y in range(event_rate_div)]

    for rate in range(event_rate_div):
        nodeFloodCount = [0 for x in range(len(nodeIds))]
        nodeInterests = [[0 for x in range(128)] for y in range(len(nodeIds))]
        childInterests = [[0 for x in range(128)] for y in range(len(nodeIds))]
        for i in range(len(nodeIds)):
            nodeInterests[i] = numpy.random.choice([0, 1], size=128, p=[1-rates[rate], rates[rate]])
        for i in range(len(nodeIds) - 1, -1, -1):
            for j in range(128):
                if parentIds[i] != 0:
                    childInterests[parentIds[i]-1][j] = childInterests[parentIds[i]-1][j] | \
                                                        nodeInterests[i][j] | childInterests[i][j]
        for round in range(number_of_rounds):
            eventNumber = random.randrange(128)
            eventRaiserNode = random.randrange(len(nodeIds))+1
            for nodeId in range(1, len(nodeIds) + 1):
                if eventRaiserNode == nodeId:
                    nodeFloodCount[nodeId-1] += 1
                elif parentIds[eventRaiserNode - 1] == nodeId:
                    nodeFloodCount[nodeId - 1] += 1
                elif childInterests[nodeId - 1][eventNumber] == 1:
                    nodeFloodCount[nodeId - 1] += 1
        for i in range(len(nodeIds)):
            if nodeFloodCount[i] != number_of_rounds:
                flooding_avg_per_rate[rate][(nodeFloodCount[i]*number_of_percentage_div // number_of_rounds)] += 1
            else:
                flooding_avg_per_rate[rate][number_of_percentage_div-1] += 1

    labels = ['0-10', '10-20', '20-30', '30-40', '40-50', '50-60', '60-70', '70-80', '80-90', '90-100']

    x = numpy.arange(len(labels))  # the label locations
    width = 1  # the width of the bars

    fig, ax = plt.subplots()
    for rate in range(event_rate_div):
        rect = ax.bar(x, flooding_avg_per_rate[rate], 0.5, label=rates[rate])
        ax.bar_label(rect, padding=1)

    ax.set_ylabel('Number of Nodes')
    ax.set_title('Grade = 4 and Subscription Rate = 0.2')
    ax.set_xticks(x, labels)
    ax.legend()
    fig.tight_layout()

    plt.show()











